// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/cart/v1/cart.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CartProductSku with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CartProductSku) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartProductSku with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CartProductSkuMultiError,
// or nil if none found.
func (m *CartProductSku) ValidateAll() error {
	return m.validate(true)
}

func (m *CartProductSku) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductSkuId

	// no validation rules for Count

	if len(errors) > 0 {
		return CartProductSkuMultiError(errors)
	}

	return nil
}

// CartProductSkuMultiError is an error wrapping multiple validation errors
// returned by CartProductSku.ValidateAll() if the designated constraints
// aren't met.
type CartProductSkuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartProductSkuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartProductSkuMultiError) AllErrors() []error { return m }

// CartProductSkuValidationError is the validation error returned by
// CartProductSku.Validate if the designated constraints aren't met.
type CartProductSkuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartProductSkuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartProductSkuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartProductSkuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartProductSkuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartProductSkuValidationError) ErrorName() string { return "CartProductSkuValidationError" }

// Error satisfies the builtin error interface
func (e CartProductSkuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartProductSku.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartProductSkuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartProductSkuValidationError{}

// Validate checks the field values on AddItemRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddItemRequestMultiError,
// or nil if none found.
func (m *AddItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProductId() <= 0 {
		err := AddItemRequestValidationError{
			field:  "ProductId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductSkuId() <= 0 {
		err := AddItemRequestValidationError{
			field:  "ProductSkuId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ShopId

	// no validation rules for Count

	if len(errors) > 0 {
		return AddItemRequestMultiError(errors)
	}

	return nil
}

// AddItemRequestMultiError is an error wrapping multiple validation errors
// returned by AddItemRequest.ValidateAll() if the designated constraints
// aren't met.
type AddItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddItemRequestMultiError) AllErrors() []error { return m }

// AddItemRequestValidationError is the validation error returned by
// AddItemRequest.Validate if the designated constraints aren't met.
type AddItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddItemRequestValidationError) ErrorName() string { return "AddItemRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddItemRequestValidationError{}

// Validate checks the field values on AddItemReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddItemReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddItemReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddItemReplyMultiError, or
// nil if none found.
func (m *AddItemReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddItemReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddItemReplyMultiError(errors)
	}

	return nil
}

// AddItemReplyMultiError is an error wrapping multiple validation errors
// returned by AddItemReply.ValidateAll() if the designated constraints aren't met.
type AddItemReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddItemReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddItemReplyMultiError) AllErrors() []error { return m }

// AddItemReplyValidationError is the validation error returned by
// AddItemReply.Validate if the designated constraints aren't met.
type AddItemReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddItemReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddItemReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddItemReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddItemReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddItemReplyValidationError) ErrorName() string { return "AddItemReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddItemReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddItemReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddItemReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddItemReplyValidationError{}

// Validate checks the field values on DeleteItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteItemRequestMultiError, or nil if none found.
func (m *DeleteItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProductId() <= 0 {
		err := DeleteItemRequestValidationError{
			field:  "ProductId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductSkuId() <= 0 {
		err := DeleteItemRequestValidationError{
			field:  "ProductSkuId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteItemRequestMultiError(errors)
	}

	return nil
}

// DeleteItemRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteItemRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteItemRequestMultiError) AllErrors() []error { return m }

// DeleteItemRequestValidationError is the validation error returned by
// DeleteItemRequest.Validate if the designated constraints aren't met.
type DeleteItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteItemRequestValidationError) ErrorName() string {
	return "DeleteItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteItemRequestValidationError{}

// Validate checks the field values on DeleteItemReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteItemReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteItemReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteItemReplyMultiError, or nil if none found.
func (m *DeleteItemReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteItemReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteItemReplyMultiError(errors)
	}

	return nil
}

// DeleteItemReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteItemReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteItemReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteItemReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteItemReplyMultiError) AllErrors() []error { return m }

// DeleteItemReplyValidationError is the validation error returned by
// DeleteItemReply.Validate if the designated constraints aren't met.
type DeleteItemReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteItemReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteItemReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteItemReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteItemReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteItemReplyValidationError) ErrorName() string { return "DeleteItemReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteItemReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteItemReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteItemReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteItemReplyValidationError{}

// Validate checks the field values on GetCartListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCartListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCartListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCartListRequestMultiError, or nil if none found.
func (m *GetCartListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCartListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMemberId() <= 0 {
		err := GetCartListRequestValidationError{
			field:  "MemberId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCartListRequestMultiError(errors)
	}

	return nil
}

// GetCartListRequestMultiError is an error wrapping multiple validation errors
// returned by GetCartListRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCartListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCartListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCartListRequestMultiError) AllErrors() []error { return m }

// GetCartListRequestValidationError is the validation error returned by
// GetCartListRequest.Validate if the designated constraints aren't met.
type GetCartListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCartListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCartListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCartListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCartListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCartListRequestValidationError) ErrorName() string {
	return "GetCartListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCartListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCartListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCartListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCartListRequestValidationError{}

// Validate checks the field values on GetCartListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCartListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCartListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCartListReplyMultiError, or nil if none found.
func (m *GetCartListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCartListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCartListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCartListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCartListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCartListReplyMultiError(errors)
	}

	return nil
}

// GetCartListReplyMultiError is an error wrapping multiple validation errors
// returned by GetCartListReply.ValidateAll() if the designated constraints
// aren't met.
type GetCartListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCartListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCartListReplyMultiError) AllErrors() []error { return m }

// GetCartListReplyValidationError is the validation error returned by
// GetCartListReply.Validate if the designated constraints aren't met.
type GetCartListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCartListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCartListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCartListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCartListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCartListReplyValidationError) ErrorName() string { return "GetCartListReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetCartListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCartListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCartListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCartListReplyValidationError{}

// Validate checks the field values on UpdateItemQuantityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateItemQuantityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateItemQuantityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateItemQuantityRequestMultiError, or nil if none found.
func (m *UpdateItemQuantityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateItemQuantityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProductId() <= 0 {
		err := UpdateItemQuantityRequestValidationError{
			field:  "ProductId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductSkuId() <= 0 {
		err := UpdateItemQuantityRequestValidationError{
			field:  "ProductSkuId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Count

	if len(errors) > 0 {
		return UpdateItemQuantityRequestMultiError(errors)
	}

	return nil
}

// UpdateItemQuantityRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateItemQuantityRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateItemQuantityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateItemQuantityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateItemQuantityRequestMultiError) AllErrors() []error { return m }

// UpdateItemQuantityRequestValidationError is the validation error returned by
// UpdateItemQuantityRequest.Validate if the designated constraints aren't met.
type UpdateItemQuantityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateItemQuantityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateItemQuantityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateItemQuantityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateItemQuantityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateItemQuantityRequestValidationError) ErrorName() string {
	return "UpdateItemQuantityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateItemQuantityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateItemQuantityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateItemQuantityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateItemQuantityRequestValidationError{}

// Validate checks the field values on UpdateItemQuantityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateItemQuantityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateItemQuantityReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateItemQuantityReplyMultiError, or nil if none found.
func (m *UpdateItemQuantityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateItemQuantityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateItemQuantityReplyMultiError(errors)
	}

	return nil
}

// UpdateItemQuantityReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateItemQuantityReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateItemQuantityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateItemQuantityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateItemQuantityReplyMultiError) AllErrors() []error { return m }

// UpdateItemQuantityReplyValidationError is the validation error returned by
// UpdateItemQuantityReply.Validate if the designated constraints aren't met.
type UpdateItemQuantityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateItemQuantityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateItemQuantityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateItemQuantityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateItemQuantityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateItemQuantityReplyValidationError) ErrorName() string {
	return "UpdateItemQuantityReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateItemQuantityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateItemQuantityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateItemQuantityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateItemQuantityReplyValidationError{}

// Validate checks the field values on ClearCartRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ClearCartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClearCartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClearCartRequestMultiError, or nil if none found.
func (m *ClearCartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClearCartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ClearCartRequestMultiError(errors)
	}

	return nil
}

// ClearCartRequestMultiError is an error wrapping multiple validation errors
// returned by ClearCartRequest.ValidateAll() if the designated constraints
// aren't met.
type ClearCartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClearCartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClearCartRequestMultiError) AllErrors() []error { return m }

// ClearCartRequestValidationError is the validation error returned by
// ClearCartRequest.Validate if the designated constraints aren't met.
type ClearCartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClearCartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClearCartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClearCartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClearCartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClearCartRequestValidationError) ErrorName() string { return "ClearCartRequestValidationError" }

// Error satisfies the builtin error interface
func (e ClearCartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClearCartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClearCartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClearCartRequestValidationError{}

// Validate checks the field values on ClearCartReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClearCartReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClearCartReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClearCartReplyMultiError,
// or nil if none found.
func (m *ClearCartReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ClearCartReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ClearCartReplyMultiError(errors)
	}

	return nil
}

// ClearCartReplyMultiError is an error wrapping multiple validation errors
// returned by ClearCartReply.ValidateAll() if the designated constraints
// aren't met.
type ClearCartReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClearCartReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClearCartReplyMultiError) AllErrors() []error { return m }

// ClearCartReplyValidationError is the validation error returned by
// ClearCartReply.Validate if the designated constraints aren't met.
type ClearCartReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClearCartReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClearCartReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClearCartReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClearCartReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClearCartReplyValidationError) ErrorName() string { return "ClearCartReplyValidationError" }

// Error satisfies the builtin error interface
func (e ClearCartReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClearCartReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClearCartReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClearCartReplyValidationError{}
