// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: internal/biz/types.proto

package biz

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddCartItemParam with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddCartItemParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCartItemParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCartItemParamMultiError, or nil if none found.
func (m *AddCartItemParam) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCartItemParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMemberId() <= 0 {
		err := AddCartItemParamValidationError{
			field:  "MemberId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductId() <= 0 {
		err := AddCartItemParamValidationError{
			field:  "product_id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductSkuId() <= 0 {
		err := AddCartItemParamValidationError{
			field:  "ProductSkuId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Count

	if len(errors) > 0 {
		return AddCartItemParamMultiError(errors)
	}

	return nil
}

// AddCartItemParamMultiError is an error wrapping multiple validation errors
// returned by AddCartItemParam.ValidateAll() if the designated constraints
// aren't met.
type AddCartItemParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCartItemParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCartItemParamMultiError) AllErrors() []error { return m }

// AddCartItemParamValidationError is the validation error returned by
// AddCartItemParam.Validate if the designated constraints aren't met.
type AddCartItemParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCartItemParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCartItemParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCartItemParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCartItemParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCartItemParamValidationError) ErrorName() string { return "AddCartItemParamValidationError" }

// Error satisfies the builtin error interface
func (e AddCartItemParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCartItemParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCartItemParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCartItemParamValidationError{}

// Validate checks the field values on UpdateCartItemParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCartItemParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCartItemParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCartItemParamMultiError, or nil if none found.
func (m *UpdateCartItemParam) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCartItemParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMemberId() <= 0 {
		err := UpdateCartItemParamValidationError{
			field:  "MemberId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductId() <= 0 {
		err := UpdateCartItemParamValidationError{
			field:  "product_id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductSkuId() <= 0 {
		err := UpdateCartItemParamValidationError{
			field:  "ProductSkuId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Count

	if len(errors) > 0 {
		return UpdateCartItemParamMultiError(errors)
	}

	return nil
}

// UpdateCartItemParamMultiError is an error wrapping multiple validation
// errors returned by UpdateCartItemParam.ValidateAll() if the designated
// constraints aren't met.
type UpdateCartItemParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCartItemParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCartItemParamMultiError) AllErrors() []error { return m }

// UpdateCartItemParamValidationError is the validation error returned by
// UpdateCartItemParam.Validate if the designated constraints aren't met.
type UpdateCartItemParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCartItemParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCartItemParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCartItemParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCartItemParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCartItemParamValidationError) ErrorName() string {
	return "UpdateCartItemParamValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCartItemParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCartItemParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCartItemParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCartItemParamValidationError{}

// Validate checks the field values on GetCartListParam with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCartListParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCartListParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCartListParamMultiError, or nil if none found.
func (m *GetCartListParam) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCartListParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMemberId() <= 0 {
		err := GetCartListParamValidationError{
			field:  "MemberId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCartListParamMultiError(errors)
	}

	return nil
}

// GetCartListParamMultiError is an error wrapping multiple validation errors
// returned by GetCartListParam.ValidateAll() if the designated constraints
// aren't met.
type GetCartListParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCartListParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCartListParamMultiError) AllErrors() []error { return m }

// GetCartListParamValidationError is the validation error returned by
// GetCartListParam.Validate if the designated constraints aren't met.
type GetCartListParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCartListParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCartListParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCartListParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCartListParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCartListParamValidationError) ErrorName() string { return "GetCartListParamValidationError" }

// Error satisfies the builtin error interface
func (e GetCartListParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCartListParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCartListParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCartListParamValidationError{}

// Validate checks the field values on ClearCartParam with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClearCartParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClearCartParam with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClearCartParamMultiError,
// or nil if none found.
func (m *ClearCartParam) ValidateAll() error {
	return m.validate(true)
}

func (m *ClearCartParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMemberId() <= 0 {
		err := ClearCartParamValidationError{
			field:  "MemberId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ClearCartParamMultiError(errors)
	}

	return nil
}

// ClearCartParamMultiError is an error wrapping multiple validation errors
// returned by ClearCartParam.ValidateAll() if the designated constraints
// aren't met.
type ClearCartParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClearCartParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClearCartParamMultiError) AllErrors() []error { return m }

// ClearCartParamValidationError is the validation error returned by
// ClearCartParam.Validate if the designated constraints aren't met.
type ClearCartParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClearCartParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClearCartParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClearCartParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClearCartParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClearCartParamValidationError) ErrorName() string { return "ClearCartParamValidationError" }

// Error satisfies the builtin error interface
func (e ClearCartParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClearCartParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClearCartParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClearCartParamValidationError{}

// Validate checks the field values on DeleteCartItemParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCartItemParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCartItemParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCartItemParamMultiError, or nil if none found.
func (m *DeleteCartItemParam) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCartItemParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMemberId() <= 0 {
		err := DeleteCartItemParamValidationError{
			field:  "MemberId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductId() <= 0 {
		err := DeleteCartItemParamValidationError{
			field:  "product_id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductSkuId() <= 0 {
		err := DeleteCartItemParamValidationError{
			field:  "ProductSkuId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCartItemParamMultiError(errors)
	}

	return nil
}

// DeleteCartItemParamMultiError is an error wrapping multiple validation
// errors returned by DeleteCartItemParam.ValidateAll() if the designated
// constraints aren't met.
type DeleteCartItemParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCartItemParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCartItemParamMultiError) AllErrors() []error { return m }

// DeleteCartItemParamValidationError is the validation error returned by
// DeleteCartItemParam.Validate if the designated constraints aren't met.
type DeleteCartItemParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCartItemParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCartItemParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCartItemParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCartItemParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCartItemParamValidationError) ErrorName() string {
	return "DeleteCartItemParamValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCartItemParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCartItemParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCartItemParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCartItemParamValidationError{}

// Validate checks the field values on CartItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CartItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CartItemMultiError, or nil
// if none found.
func (m *CartItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProductId() <= 0 {
		err := CartItemValidationError{
			field:  "product_id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductSkuId() <= 0 {
		err := CartItemValidationError{
			field:  "ProductSkuId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Count

	if len(errors) > 0 {
		return CartItemMultiError(errors)
	}

	return nil
}

// CartItemMultiError is an error wrapping multiple validation errors returned
// by CartItem.ValidateAll() if the designated constraints aren't met.
type CartItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemMultiError) AllErrors() []error { return m }

// CartItemValidationError is the validation error returned by
// CartItem.Validate if the designated constraints aren't met.
type CartItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemValidationError) ErrorName() string { return "CartItemValidationError" }

// Error satisfies the builtin error interface
func (e CartItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemValidationError{}

// Validate checks the field values on ProductCategory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProductCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductCategory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductCategoryMultiError, or nil if none found.
func (m *ProductCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := ProductCategoryValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for Level

	if m.GetParentId() <= 0 {
		err := ProductCategoryValidationError{
			field:  "ParentId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Sort

	// no validation rules for Icon

	// no validation rules for Description

	// no validation rules for ProductCount

	// no validation rules for ProductUnit

	// no validation rules for NavStatus

	// no validation rules for ShowStatus

	if len(errors) > 0 {
		return ProductCategoryMultiError(errors)
	}

	return nil
}

// ProductCategoryMultiError is an error wrapping multiple validation errors
// returned by ProductCategory.ValidateAll() if the designated constraints
// aren't met.
type ProductCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductCategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductCategoryMultiError) AllErrors() []error { return m }

// ProductCategoryValidationError is the validation error returned by
// ProductCategory.Validate if the designated constraints aren't met.
type ProductCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductCategoryValidationError) ErrorName() string { return "ProductCategoryValidationError" }

// Error satisfies the builtin error interface
func (e ProductCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductCategoryValidationError{}

// Validate checks the field values on CreateProductCategoryParam with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductCategoryParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductCategoryParam with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductCategoryParamMultiError, or nil if none found.
func (m *CreateProductCategoryParam) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductCategoryParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProductCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProductCategoryParamValidationError{
					field:  "ProductCategory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProductCategoryParamValidationError{
					field:  "ProductCategory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProductCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProductCategoryParamValidationError{
				field:  "ProductCategory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProductCategoryParamMultiError(errors)
	}

	return nil
}

// CreateProductCategoryParamMultiError is an error wrapping multiple
// validation errors returned by CreateProductCategoryParam.ValidateAll() if
// the designated constraints aren't met.
type CreateProductCategoryParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductCategoryParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductCategoryParamMultiError) AllErrors() []error { return m }

// CreateProductCategoryParamValidationError is the validation error returned
// by CreateProductCategoryParam.Validate if the designated constraints aren't met.
type CreateProductCategoryParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductCategoryParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductCategoryParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductCategoryParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductCategoryParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductCategoryParamValidationError) ErrorName() string {
	return "CreateProductCategoryParamValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductCategoryParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductCategoryParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductCategoryParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductCategoryParamValidationError{}

// Validate checks the field values on UpdateProductCategoryParam with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductCategoryParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductCategoryParam with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductCategoryParamMultiError, or nil if none found.
func (m *UpdateProductCategoryParam) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductCategoryParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProductCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProductCategoryParamValidationError{
					field:  "ProductCategory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProductCategoryParamValidationError{
					field:  "ProductCategory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProductCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProductCategoryParamValidationError{
				field:  "ProductCategory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProductCategoryParamMultiError(errors)
	}

	return nil
}

// UpdateProductCategoryParamMultiError is an error wrapping multiple
// validation errors returned by UpdateProductCategoryParam.ValidateAll() if
// the designated constraints aren't met.
type UpdateProductCategoryParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductCategoryParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductCategoryParamMultiError) AllErrors() []error { return m }

// UpdateProductCategoryParamValidationError is the validation error returned
// by UpdateProductCategoryParam.Validate if the designated constraints aren't met.
type UpdateProductCategoryParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductCategoryParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductCategoryParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductCategoryParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductCategoryParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductCategoryParamValidationError) ErrorName() string {
	return "UpdateProductCategoryParamValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductCategoryParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductCategoryParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductCategoryParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductCategoryParamValidationError{}
