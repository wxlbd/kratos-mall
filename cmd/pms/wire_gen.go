// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/wxlbd/tint"
	"kratos-admin/internal/biz"
	"kratos-admin/internal/conf"
	"kratos-admin/internal/data"
	"kratos-admin/internal/server"
	"kratos-admin/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger *tint.Logger) (*kratos.App, func(), error) {
	db, cleanup := data.NewGorm(confData, logger)
	universalClient, err := data.NewRedis(confData)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	dataData, cleanup2, err := data.NewData(confData, logger, db, universalClient)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	productRepo := data.NewProductRepo(dataData)
	productUseCase := biz.NewProductUseCase(productRepo)
	productAttributeRepo := data.NewProductAttributeRepo(dataData)
	productAttributeUseCase := biz.NewProductAttributeUseCase(productAttributeRepo)
	productCategoryRepo := data.NewProductCategoryRepo(dataData)
	productCategoryUseCase := biz.NewProductCategoryUseCase(productCategoryRepo)
	productAttributeValueRepo := data.NewProductAttributeValueRepo(dataData)
	productAttributeValueUseCase := biz.NewProductAttributeValueUseCase(productAttributeValueRepo)
	productService := service.NewProductService(productUseCase, productAttributeUseCase, productCategoryUseCase, productAttributeValueUseCase)
	grpcServer := server.NewGRPCServer(confServer, productService, logger)
	authUseCase := biz.NewAuthUseCase(confData)
	httpServer := server.NewHTTPServer(confServer, productService, logger, authUseCase)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
